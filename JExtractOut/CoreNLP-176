edu.stanford.nlp.stats.Counters	public static void logNormalizeInPlace(Counter<E>) 	e4173:106;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5305:132;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5350:87;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5350:69;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5305:114;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e5800:76;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e5800:58;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e5753:105;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6142:81;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6142:65;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6099:108;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e6802:265;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e6824:243;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e6824:224;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e6802:246;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e6759:289;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e7938:152;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8095:364;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8155:304;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8198:261;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8155:285;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8759:262;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8781:240;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8781:221;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8759:243;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8716:286;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9430:152;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9430:114;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9385:197;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9385:159;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9365:179;
edu.stanford.nlp.stats.Counters	public static void addInPlace(Counter<E>, Counter<E>) 	e10365:118;
edu.stanford.nlp.stats.Counters	public static void addInPlace(Counter<E>, Counter<E>) 	e10404:79;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11170:85;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11170:69;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11099:103;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11207:48;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11099:140;
edu.stanford.nlp.stats.Counters	public static void addInPlace(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>, double) 	e11580:126;
edu.stanford.nlp.stats.Counters	public static void addInPlace(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e12003:118;
edu.stanford.nlp.stats.Counters	public static Counter<E> divideInPlace(Counter<E>, double) 	e15062:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, double) 	e15567:126;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16172:51;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16022:145;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16022:182;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e17810:346;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e17810:322;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e17852:304;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e17852:280;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e17970:186;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18387:118;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18339:166;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18435:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e18771:78;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e18771:153;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e18723:201;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e18854:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e18826:98;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19188:216;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19229:175;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19229:155;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19188:196;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19116:288;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19631:195;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19631:175;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19750:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19750:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19631:114;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20321:205;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20321:185;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20450:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20450:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20321:124;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21360:109;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21360:89;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21069:286;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21020:335;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21137:212;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22167:111;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22167:91;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e21930:232;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e21979:299;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e21979:279;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22710:233;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22741:146;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22710:177;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22741:202;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22666:369;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23418:98;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23379:224;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23379:204;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23527:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23527:56;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e24764:129;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e24764:110;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e24797:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e24723:151;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25167:129;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25167:110;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25200:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25126:151;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25543:120;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25543:101;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25576:62;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25502:142;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26060:98;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26060:83;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26015:128;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26465:104;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26465:89;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26420:134;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparatorWithKeys(Counter<E>) 	e28120:91;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparatorWithKeys(Counter<E>) 	e28044:167;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e29820:220;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e30086:220;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e29795:519;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e30912:122;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e30912:108;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e30994:40;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e30867:153;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31340:118;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31340:104;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31340:76;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31421:37;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31390:68;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31771:125;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31771:101;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31729:167;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31729:143;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31677:195;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32911:100;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32935:37;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32911:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32935:76;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32253:1054;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33523:149;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33417:101;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33523:134;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33465:113;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33584:88;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34105:80;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e33946:130;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34003:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34003:182;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34003:168;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34494:130;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34551:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34653:46;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34551:148;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34551:134;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35190:117;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35190:99;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35223:60;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35106:183;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35708:70;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35708:51;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35663:68;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35736:42;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35663:96;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36127:292;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36127:273;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36266:128;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36226:168;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36226:94;
edu.stanford.nlp.stats.Counters	public static double jaccardCoefficient(Counter<E>, Counter<E>) 	e36755:280;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37261:149;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37261:130;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37211:180;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37714:734;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37714:714;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37748:674;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38037:377;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38008:414;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38777:123;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38825:75;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38721:205;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38721:185;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38695:211;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39040:88;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39040:68;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39014:94;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39287:80;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39287:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39259:108;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39259:89;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39209:73;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39622:42;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39444:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39494:170;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39494:151;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39494:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e39852:106;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e39852:87;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e39802:137;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40610:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40861:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40646:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40897:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40719:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41354:222;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41354:203;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41413:138;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41484:67;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41304:253;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e41882:142;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e41882:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e41832:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42324:176;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42324:157;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42383:92;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42274:207;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43075:93;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e42979:189;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e42941:227;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e42908:286;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e42908:266;
edu.stanford.nlp.stats.Counters	public static double crossEntropy(Counter<E>, Counter<E>) 	e43587:429;
edu.stanford.nlp.stats.Counters	public static double crossEntropy(Counter<E>, Counter<E>) 	e43562:454;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44888:53;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44745:522;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44643:624;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44605:662;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e45922:113;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e45966:69;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e45880:155;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e45835:200;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46496:105;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46451:150;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46451:112;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47256:63;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47223:120;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47223:102;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47199:126;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47756:62;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47718:100;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47685:158;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47685:139;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47660:164;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49007:179;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e48872:130;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e48847:155;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49032:154;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49032:115;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50177:81;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50137:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e49989:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50023:103;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e49989:291;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e50853:211;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e50853:191;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e50853:83;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e50941:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e50941:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51482:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51482:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51393:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51343:134;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51393:192;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e51964:101;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e51778:261;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e51905:160;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e51905:134;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e51841:224;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52784:343;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52580:199;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52639:272;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52639:226;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52916:211;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53375:319;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53304:459;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53304:440;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53652:86;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53375:363;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54777:78;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54777:349;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54483:271;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54861:265;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54828:298;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55256:86;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55256:67;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55203:120;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e55784:100;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e55784:81;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e55740:125;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56463:75;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56433:105;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56364:238;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56364:219;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56433:144;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e56782:78;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e56751:109;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e56700:77;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<E> loadCounter(java.lang.String, Class<E>) throws java.lang.RuntimeException	e57398:58;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<E> loadCounter(java.lang.String, Class<E>) throws java.lang.RuntimeException	e57342:94;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> loadIntCounter(java.lang.String, Class<E>) throws java.lang.Exception	e57978:58;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> loadIntCounter(java.lang.String, Class<E>) throws java.lang.Exception	e57930:86;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58229:430;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58414:219;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58529:104;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58467:166;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58286:373;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.io.OutputStream) 	e59009:80;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.lang.String) throws java.io.IOException	e59374:37;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.lang.String) throws java.io.IOException	e59315:79;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59573:132;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59573:114;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59646:59;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e59952:718;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60386:258;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60436:208;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60072:598;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60012:658;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e60980:724;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61414:264;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61464:214;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61100:604;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61040:664;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e61967:190;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e61967:173;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62010:124;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e61902:238;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62364:260;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62364:243;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62452:149;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62407:194;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62500:101;
edu.stanford.nlp.stats.Counters	public static void serializeCounter(Counter<T>, java.lang.String) throws java.io.IOException	e62864:36;
edu.stanford.nlp.stats.Counters	public static void serializeCounter(Counter<T>, java.lang.String) throws java.io.IOException	e62753:130;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63129:96;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63129:82;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63200:25;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63023:188;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64475:302;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64676:95;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64641:130;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64576:201;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64530:247;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66618:136;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66572:182;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66618:212;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67437:83;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67601:176;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67601:115;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67650:66;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67628:88;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68350:301;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68517:58;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68551:94;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68495:80;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68350:354;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69046:469;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69343:134;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69046:437;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69400:77;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69290:225;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69875:147;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69676:384;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69932:90;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69822:238;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69822:206;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71201:478;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71388:259;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71388:198;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71415:171;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71244:435;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e71953:166;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e71953:147;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e71910:209;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e71910:190;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e71889:211;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72386:134;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72386:120;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72205:176;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72434:66;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72343:177;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e72855:179;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e72855:159;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e72806:208;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e73997:97;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e73970:148;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e73970:130;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74031:63;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e73926:192;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74395:44;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74368:95;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74368:77;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74353:110;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74353:92;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e74914:88;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e74875:152;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e74875:133;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e74755:253;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75648:30;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75683:374;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75734:323;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75759:298;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75648:81;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76505:139;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76505:125;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76540:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76540:90;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76461:169;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e76762:96;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e76762:82;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e76718:126;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77120:90;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77120:76;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77076:120;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77683:42;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77449:229;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77509:216;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77509:197;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77509:169;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78351:152;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78280:223;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78186:317;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80378:1116;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80212:1404;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80668:658;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82503:224;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82503:204;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82588:113;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82559:168;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82559:148;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>) 	e82991:200;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88173:416;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88069:637;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e90811:456;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e90690:694;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e87604:416;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92313:95;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92358:50;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92313:74;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93226:264;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93255:235;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93304:41;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCopy(Counter<E>) 	e94696:60;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCopy(Counter<E>) 	e94643:89;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95734:234;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95670:80;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95877:64;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95835:127;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95835:106;
edu.stanford.nlp.stats.Counters	public static void divideInPlace(TwoDimensionalCounter<A,B>, double) 	e96073:114;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96536:185;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96622:99;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96581:140;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96581:77;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96536:122;
edu.stanford.nlp.stats.Counters	public static double spearmanRankCorrelation(Counter<E>, Counter<E>) 	e96864:115;
edu.stanford.nlp.stats.Counters	public static void ensureKeys(Counter<E>, Collection<E>, double) 	e97298:51;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97519:120;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97519:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97578:38;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97536:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97536:86;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e97912:67;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e97900:79;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e97841:161;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e97841:144;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e97858:144;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98158:193;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98158:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98109:222;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98697:83;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98697:60;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98645:112;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e98974:80;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e98922:138;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e98885:175;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e98922:180;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99227:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99227:87;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99181:133;
