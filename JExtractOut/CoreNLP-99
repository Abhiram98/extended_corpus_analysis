edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5787:87;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5787:69;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5742:114;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7261:224;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8478:261;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8435:285;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8499:240;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8499:221;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8478:242;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e9061:221;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9710:114;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18090:346;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18090:322;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18132:304;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18132:280;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18250:186;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18667:118;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18715:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19051:78;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19051:153;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19134:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19106:98;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19468:216;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19509:175;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19509:155;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19468:196;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19596:62;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e20030:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e20030:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19911:114;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19867:158;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19950:69;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20730:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20730:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20601:124;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20557:168;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20640:79;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21640:109;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21640:89;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21349:286;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21300:335;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21417:212;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22447:111;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22447:91;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22210:232;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22259:183;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22298:138;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22990:233;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e23021:146;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22990:177;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e23021:202;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22946:283;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23698:98;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23807:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23807:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23659:143;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23615:187;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e25077:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25480:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25856:62;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31620:76;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31701:37;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31670:54;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e32051:101;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33191:100;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33215:37;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33191:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33215:76;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33191:291;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33697:101;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33803:134;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33745:113;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33864:88;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33864:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34385:80;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34283:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34831:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34933:46;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35503:60;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36546:128;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36506:168;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36506:94;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36466:134;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36466:208;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37994:734;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37994:714;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38028:674;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38317:377;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38288:414;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39057:123;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39105:75;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39567:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39489:73;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39902:42;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39774:123;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40890:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e41141:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40926:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e41177:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40999:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41693:138;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41764:67;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42663:92;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43355:93;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43259:189;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43221:227;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43188:266;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e45168:53;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e45025:522;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46202:113;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46246:69;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47536:63;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e48036:62;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47998:100;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49287:179;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49152:130;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49127:155;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49312:154;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49312:115;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50457:81;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50417:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50269:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50303:103;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50269:291;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51133:83;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51221:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51221:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51188:136;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51762:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51762:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51673:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51623:134;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52244:101;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52185:134;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e53064:343;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52860:199;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52919:272;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52919:226;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e53196:211;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53655:319;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53932:86;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53655:363;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53617:357;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53617:401;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55057:78;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55057:349;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54763:271;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55141:265;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55108:298;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56743:75;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56713:105;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56713:144;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56677:141;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56677:180;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58694:219;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58809:104;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58747:166;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58566:373;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58509:412;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59853:114;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59926:59;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60666:258;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60716:208;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60352:598;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60292:658;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60749:175;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61694:264;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61744:214;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61380:604;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61320:664;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61777:181;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62290:124;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62732:149;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62687:194;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62780:101;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64956:95;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64921:130;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64856:201;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67717:83;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67881:176;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67881:115;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67930:66;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67908:88;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68630:301;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68797:58;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68831:94;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68775:80;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68630:328;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69623:134;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69680:77;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69570:193;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70155:147;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70212:90;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70102:206;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71668:259;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71668:198;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71695:171;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71695:232;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71568:391;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72233:147;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72666:134;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72666:120;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72485:176;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72714:66;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72623:163;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74277:97;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74250:148;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74250:130;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74311:63;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74206:192;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74675:44;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74648:95;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74648:77;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74633:92;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e75194:88;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75928:30;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e76014:323;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e76039:298;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75928:81;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76820:90;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77963:42;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77789:169;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78631:152;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78560:223;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80658:1116;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80492:1404;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80948:658;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82868:113;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82839:148;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82910:71;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88453:416;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88349:637;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e91091:456;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e90970:694;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e87884:416;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92593:95;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92638:50;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92593:74;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93584:41;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95950:80;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96157:64;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96115:127;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96115:106;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96157:85;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96816:185;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96902:99;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96861:140;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96861:77;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96816:122;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97799:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97858:38;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97816:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97816:86;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98192:67;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98180:79;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98121:144;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98138:144;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98138:127;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e99254:80;
