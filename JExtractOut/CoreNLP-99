edu.stanford.nlp.stats.Counters	public static void logNormalizeInPlace(Counter<E>) 	e4610:106;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5742:132;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5787:87;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5787:69;
edu.stanford.nlp.stats.Counters	public static double max(Counter<E>, double) 	e5742:114;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e6237:76;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e6237:58;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(Collection<E>) 	e6190:105;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6579:81;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6579:65;
edu.stanford.nlp.stats.Counters	public static double min(Counter<E>) 	e6536:108;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7239:265;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7261:243;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7261:224;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7239:246;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>) 	e7196:289;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8435:304;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8478:261;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8435:285;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8499:240;
edu.stanford.nlp.stats.Counters	public static E argmax(Counter<E>, Comparator<E>, E) 	e8499:221;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e9039:262;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e9061:240;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e9061:221;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e9039:243;
edu.stanford.nlp.stats.Counters	public static E argmin(Counter<E>, Comparator<E>) 	e8996:286;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9710:152;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9710:114;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9665:197;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9665:159;
edu.stanford.nlp.stats.Counters	public static double standardDeviation(Counter<E>) 	e9645:179;
edu.stanford.nlp.stats.Counters	public static void addInPlace(Counter<E>, Counter<E>) 	e10645:118;
edu.stanford.nlp.stats.Counters	public static void addInPlace(Counter<E>, Counter<E>) 	e10684:79;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11450:85;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11450:69;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11379:103;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11487:48;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> add(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e11379:140;
edu.stanford.nlp.stats.Counters	public static void addInPlace(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>, double) 	e11860:126;
edu.stanford.nlp.stats.Counters	public static void addInPlace(TwoDimensionalCounter<T1,T2>, TwoDimensionalCounter<T1,T2>) 	e12283:118;
edu.stanford.nlp.stats.Counters	public static Counter<E> divideInPlace(Counter<E>, double) 	e15342:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, double) 	e15847:126;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16452:51;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16302:145;
edu.stanford.nlp.stats.Counters	public static Counter<E> multiplyInPlace(Counter<E>, Counter<E>) 	e16302:182;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18090:346;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18090:322;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18132:304;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18132:280;
edu.stanford.nlp.stats.Counters	public static List<E> deleteOutofRange(Counter<E>, int, int) 	e18250:186;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18667:118;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18619:166;
edu.stanford.nlp.stats.Counters	public static void retainTop(Counter<E>, int) 	e18715:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19051:78;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19051:153;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19003:201;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19134:70;
edu.stanford.nlp.stats.Counters	public static void retainTopKeyComparable(Counter<E>, int) 	e19106:98;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19468:216;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19509:175;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19509:155;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19468:196;
edu.stanford.nlp.stats.Counters	public static List<E> retainBottom(Counter<E>, int) 	e19396:288;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19911:195;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19911:175;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e20030:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e20030:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainNonZeros(Counter<E>) 	e19911:114;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20601:205;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20601:185;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20730:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20730:56;
edu.stanford.nlp.stats.Counters	public static Set<E> retainAbove(Counter<E>, double) 	e20601:124;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21640:109;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21640:89;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21349:286;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21300:335;
edu.stanford.nlp.stats.Counters	public static Set<Pair<E1,E2>> retainAbove(TwoDimensionalCounter<E1,E2>, double) 	e21417:212;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22447:111;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22447:91;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22210:232;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22259:299;
edu.stanford.nlp.stats.Counters	public static Counter<E> retainBelow(Counter<E>, double) 	e22259:279;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22990:233;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e23021:146;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22990:177;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e23021:202;
edu.stanford.nlp.stats.Counters	public static Set<java.lang.String> retainMatchingKeys(Counter<java.lang.String>, List<java.util.regex.Pattern>) 	e22946:369;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23698:98;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23659:224;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23659:204;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23807:76;
edu.stanford.nlp.stats.Counters	public static Set<E> retainKeys(Counter<E>, Collection<E>) 	e23807:56;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e25044:129;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e25044:110;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e25077:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAbove(Counter<E>, double) 	e25003:151;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25447:129;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25447:110;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25480:71;
edu.stanford.nlp.stats.Counters	public static Set<E> keysBelow(Counter<E>, double) 	e25406:151;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25823:120;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25823:101;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25856:62;
edu.stanford.nlp.stats.Counters	public static Set<E> keysAt(Counter<E>, double) 	e25782:142;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26340:98;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26340:83;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transform(Counter<T1>, Function<T1,T2>) 	e26295:128;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26745:104;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26745:89;
edu.stanford.nlp.stats.Counters	public static Counter<T2> transformWithValuesAdd(Counter<T1>, Function<T1,T2>) 	e26700:134;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparatorWithKeys(Counter<E>) 	e28400:91;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparatorWithKeys(Counter<E>) 	e28324:167;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e30100:220;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e30366:220;
edu.stanford.nlp.stats.Counters	public static Comparator<E> toComparator(Counter<E>, boolean, boolean) 	e30075:519;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e31192:122;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e31192:108;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e31274:40;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedList(Counter<E>, boolean) 	e31147:153;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31620:118;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31620:104;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31620:76;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31701:37;
edu.stanford.nlp.stats.Counters	public static List<E> toSortedListKeyComparable(Counter<E>) 	e31670:68;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e32051:125;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e32051:101;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e32009:167;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e32009:143;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> toRankCounter(Counter<E>) 	e31957:195;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33191:100;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33215:37;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33191:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e33215:76;
edu.stanford.nlp.stats.Counters	public static Counter<E> toTiedRankCounter(Counter<E>) 	e32533:1054;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33803:149;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33697:101;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33803:134;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33745:113;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toDescendingMagnitudeSortedListWithCounts(Counter<E>) 	e33864:88;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34385:80;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34226:130;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34283:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34283:182;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>) 	e34283:168;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34774:130;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34831:73;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34933:46;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34831:148;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> toSortedListWithCounts(Counter<E>, Comparator<Pair<E,java.lang.Double>>) 	e34831:134;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35470:117;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35470:99;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35503:60;
edu.stanford.nlp.stats.Counters	public static PriorityQueue<E> toPriorityQueue(Counter<E>) 	e35386:183;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35988:70;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35988:51;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35943:68;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e36016:42;
edu.stanford.nlp.stats.Counters	public static C union(C, C) 	e35943:96;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36407:292;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36407:273;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36546:128;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36506:168;
edu.stanford.nlp.stats.Counters	public static Counter<E> intersection(Counter<E>, Counter<E>) 	e36506:94;
edu.stanford.nlp.stats.Counters	public static double jaccardCoefficient(Counter<E>, Counter<E>) 	e37035:280;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37541:149;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37541:130;
edu.stanford.nlp.stats.Counters	public static Counter<E> product(Counter<E>, Counter<E>) 	e37491:180;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37994:734;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e37994:714;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38028:674;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38317:377;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, Counter<E>) 	e38288:414;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39057:123;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39105:75;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39001:205;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e39001:185;
edu.stanford.nlp.stats.Counters	public static double dotProduct(Counter<E>, double[], Index<E>) 	e38975:211;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39320:88;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39320:68;
edu.stanford.nlp.stats.Counters	public static double sumEntries(Counter<E>, Collection<E>) 	e39294:94;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39567:80;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39567:61;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39539:108;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39539:89;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Collection<E>) 	e39489:73;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39902:42;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39724:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39774:170;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39774:151;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, Counter<E>) 	e39774:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e40132:106;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e40132:87;
edu.stanford.nlp.stats.Counters	public static Counter<E> add(Counter<E>, double) 	e40082:137;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40890:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e41141:231;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40926:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e41177:187;
edu.stanford.nlp.stats.Counters	public static double optimizedDotProduct(Counter<E>, Counter<E>) 	e40999:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41634:222;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41634:203;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41693:138;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41764:67;
edu.stanford.nlp.stats.Counters	public static Counter<E> absoluteDifference(Counter<E>, Counter<E>) 	e41584:253;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e42162:142;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e42162:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> division(Counter<E>, Counter<E>) 	e42112:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42604:176;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42604:157;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42663:92;
edu.stanford.nlp.stats.Counters	public static Counter<E> divisionNonNaN(Counter<E>, Counter<E>) 	e42554:207;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43355:93;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43259:189;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43221:227;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43188:286;
edu.stanford.nlp.stats.Counters	public static double entropy(Counter<E>) 	e43188:266;
edu.stanford.nlp.stats.Counters	public static double crossEntropy(Counter<E>, Counter<E>) 	e43867:429;
edu.stanford.nlp.stats.Counters	public static double crossEntropy(Counter<E>, Counter<E>) 	e43842:454;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e45168:53;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e45025:522;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44923:624;
edu.stanford.nlp.stats.Counters	public static double klDivergence(Counter<E>, Counter<E>) 	e44885:662;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46202:113;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46246:69;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46160:155;
edu.stanford.nlp.stats.Counters	public static double jensenShannonDivergence(Counter<E>, Counter<E>) 	e46115:200;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46776:105;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46731:150;
edu.stanford.nlp.stats.Counters	public static double skewDivergence(Counter<E>, Counter<E>, double) 	e46731:112;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47536:63;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47503:120;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47503:102;
edu.stanford.nlp.stats.Counters	public static double sumSquares(C) 	e47479:126;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e48036:62;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47998:100;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47965:158;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47965:139;
edu.stanford.nlp.stats.Counters	public static double L1Norm(C) 	e47940:164;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49287:179;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49152:130;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49127:155;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49312:154;
edu.stanford.nlp.stats.Counters	public static double saferL2Norm(C) 	e49312:115;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50457:81;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50417:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50269:143;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50303:103;
edu.stanford.nlp.stats.Counters	public static double cosine(Counter<E>, Counter<E>) 	e50269:291;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51133:211;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51133:191;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51133:83;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51221:123;
edu.stanford.nlp.stats.Counters	public static Counter<E> average(Counter<E>, Counter<E>) 	e51221:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51762:103;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51762:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51673:84;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51623:134;
edu.stanford.nlp.stats.Counters	public static Counter<E> linearCombination(Counter<E>, double, Counter<E>, double) 	e51673:192;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52244:101;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52058:261;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52185:160;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52185:134;
edu.stanford.nlp.stats.Counters	public static double pointwiseMutualInformation(Counter<T1>, Counter<T2>, Counter<Pair<T1,T2>>, Pair<T1,T2>) 	e52121:224;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e53064:343;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52860:199;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52919:272;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e52919:226;
edu.stanford.nlp.stats.Counters	public static int hIndex(Counter<E>) 	e53196:211;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53655:319;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53584:459;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53584:440;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53932:86;
edu.stanford.nlp.stats.Counters	public static C perturbCounts(C, java.util.Random, double) 	e53655:363;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55057:78;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55057:349;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e54763:271;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55141:265;
edu.stanford.nlp.stats.Counters	public static void printCounterComparison(Counter<E>, Counter<E>, java.io.PrintWriter) 	e55108:298;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55536:86;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55536:67;
edu.stanford.nlp.stats.Counters	public static Counter<java.lang.Double> getCountCounts(Counter<E>) 	e55483:120;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e56064:100;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e56064:81;
edu.stanford.nlp.stats.Counters	public static C scale(C, double) 	e56020:125;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56743:75;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56713:105;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56644:238;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56644:219;
edu.stanford.nlp.stats.Counters	public static C tfLogScale(C, double) 	e56713:144;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e57062:78;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e57031:109;
edu.stanford.nlp.stats.Counters	public static void printCounterSortedByKeys(Counter<E>) 	e56980:77;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<E> loadCounter(java.lang.String, Class<E>) throws java.lang.RuntimeException	e57678:58;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<E> loadCounter(java.lang.String, Class<E>) throws java.lang.RuntimeException	e57622:94;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> loadIntCounter(java.lang.String, Class<E>) throws java.lang.Exception	e58258:58;
edu.stanford.nlp.stats.Counters	public static IntCounter<E> loadIntCounter(java.lang.String, Class<E>) throws java.lang.Exception	e58210:86;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58509:430;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58694:219;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58809:104;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58747:166;
edu.stanford.nlp.stats.Counters	private static void loadIntoCounter(java.lang.String, Class<E>, Counter<E>) throws java.lang.RuntimeException	e58566:373;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.io.OutputStream) 	e59289:80;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.lang.String) throws java.io.IOException	e59654:37;
edu.stanford.nlp.stats.Counters	public static void saveCounter(Counter<E>, java.lang.String) throws java.io.IOException	e59595:79;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59853:132;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59853:114;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> load2DCounter(java.lang.String, Class<T1>, Class<T2>) throws java.lang.RuntimeException	e59926:59;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60232:718;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60666:258;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60716:208;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60352:598;
edu.stanford.nlp.stats.Counters	public static void loadInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounter<T1,T2>) throws java.lang.RuntimeException	e60292:658;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61260:724;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61694:264;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61744:214;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61380:604;
edu.stanford.nlp.stats.Counters	public static void loadIncInto2DCounter(java.lang.String, Class<T1>, Class<T2>, TwoDimensionalCounterInterface<T1,T2>) throws java.lang.RuntimeException	e61320:664;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62247:190;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62247:173;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62290:124;
edu.stanford.nlp.stats.Counters	public static void save2DCounter(TwoDimensionalCounter<T1,T2>, java.lang.String) throws java.io.IOException	e62182:238;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62644:260;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62644:243;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62732:149;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62687:194;
edu.stanford.nlp.stats.Counters	public static void save2DCounterSorted(TwoDimensionalCounterInterface<T1,T2>, java.lang.String) throws java.io.IOException	e62780:101;
edu.stanford.nlp.stats.Counters	public static void serializeCounter(Counter<T>, java.lang.String) throws java.io.IOException	e63144:36;
edu.stanford.nlp.stats.Counters	public static void serializeCounter(Counter<T>, java.lang.String) throws java.io.IOException	e63033:130;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63409:96;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63409:82;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63480:25;
edu.stanford.nlp.stats.Counters	public static ClassicCounter<T> deserializeCounter(java.lang.String) throws java.lang.Exception	e63303:188;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64755:302;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64956:95;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64921:130;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64856:201;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedString(Counter<T>, int, java.lang.String, java.lang.String, java.lang.String) 	e64810:247;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66898:136;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66852:182;
edu.stanford.nlp.stats.Counters	public static java.lang.String toSortedByKeysString(Counter<T>, java.lang.String, java.lang.String, java.lang.String) 	e66898:212;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67717:83;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67881:176;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67881:115;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67930:66;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat) 	e67908:88;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68630:301;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68797:58;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68831:94;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68775:80;
edu.stanford.nlp.stats.Counters	public static java.lang.String toString(Counter<E>, java.text.NumberFormat, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	e68630:354;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69326:469;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69623:134;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69326:437;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69680:77;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<E>, int) 	e69570:225;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70155:147;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e69956:384;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70212:90;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70102:238;
edu.stanford.nlp.stats.Counters	public static java.lang.String toBiggestValuesFirstString(Counter<java.lang.Integer>, int, Index<T>) 	e70102:206;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71481:478;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71668:259;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71668:198;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71695:171;
edu.stanford.nlp.stats.Counters	public static java.lang.String toVerticalString(Counter<E>, int, java.lang.String, boolean) 	e71524:435;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72233:166;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72233:147;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72190:209;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72190:190;
edu.stanford.nlp.stats.Counters	public static E restrictedArgMax(Counter<E>, Collection<E>) 	e72169:211;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72666:134;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72666:120;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72485:176;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72714:66;
edu.stanford.nlp.stats.Counters	public static Counter<T> toCounter(double[], Index<T>) 	e72623:177;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e73135:179;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e73135:159;
edu.stanford.nlp.stats.Counters	public static Counter<E> toCounter(Map<java.lang.Integer,? extends java.lang.Number>, Index<E>) 	e73086:208;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74277:97;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74250:148;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74250:130;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74311:63;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>, Index<E>, int) 	e74206:192;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74675:44;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74648:95;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74648:77;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74633:110;
edu.stanford.nlp.stats.Counters	public static double[] asArray(Counter<E>) 	e74633:92;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e75194:88;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e75155:152;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e75155:133;
edu.stanford.nlp.stats.Counters	public static TwoDimensionalCounter<T1,T2> scale(TwoDimensionalCounter<T1,T2>, double) 	e75035:253;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75928:30;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75963:374;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e76014:323;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e76039:298;
edu.stanford.nlp.stats.Counters	public static T sample(Counter<T>, java.util.Random) 	e75928:81;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76785:139;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76785:125;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76820:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76820:90;
edu.stanford.nlp.stats.Counters	public static Counter<E> powNormalized(Counter<E>, double) 	e76741:169;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e77042:96;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e77042:82;
edu.stanford.nlp.stats.Counters	public static Counter<T> pow(Counter<T>, double) 	e76998:126;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77400:90;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77400:76;
edu.stanford.nlp.stats.Counters	public static Counter<T> exp(Counter<T>) 	e77356:120;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77963:42;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77729:229;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77789:216;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77789:197;
edu.stanford.nlp.stats.Counters	public static Counter<T> diff(Counter<T>, Counter<T>) 	e77789:169;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78631:152;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78560:223;
edu.stanford.nlp.stats.Counters	public static boolean equals(Counter<E>, Counter<E>, double) 	e78466:317;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80658:1116;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80492:1404;
edu.stanford.nlp.stats.Counters	public static Counter<T> unmodifiableCounter(Counter<T>) 	e80948:658;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82783:224;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82783:204;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82868:113;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82839:168;
edu.stanford.nlp.stats.Counters	public static Counter<E> asCounter(FixedPrioritiesPriorityQueue<E>) 	e82839:148;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>) 	e83271:200;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88453:416;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e88349:637;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e91091:456;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e90970:694;
edu.stanford.nlp.stats.Counters	public static Counter<E> fromMap(Map<E,N>, Class<N>) 	e87884:416;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92593:95;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92638:50;
edu.stanford.nlp.stats.Counters	public static Map<E,java.lang.Double> asMap(Counter<E>) 	e92593:74;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93506:264;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93535:235;
edu.stanford.nlp.stats.Counters	public static boolean isUniformDistribution(Counter<E>, double) 	e93584:41;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCopy(Counter<E>) 	e94976:60;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCopy(Counter<E>) 	e94923:89;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96014:234;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e95950:80;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96157:64;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96115:127;
edu.stanford.nlp.stats.Counters	public static void retainTopMass(Counter<E>, double) 	e96115:106;
edu.stanford.nlp.stats.Counters	public static void divideInPlace(TwoDimensionalCounter<A,B>, double) 	e96353:114;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96816:185;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96902:99;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96861:140;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96861:77;
edu.stanford.nlp.stats.Counters	public static double pearsonsCorrelationCoefficient(Counter<E>, Counter<E>) 	e96816:122;
edu.stanford.nlp.stats.Counters	public static double spearmanRankCorrelation(Counter<E>, Counter<E>) 	e97144:115;
edu.stanford.nlp.stats.Counters	public static void ensureKeys(Counter<E>, Collection<E>, double) 	e97578:51;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97799:120;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97799:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97858:38;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97816:103;
edu.stanford.nlp.stats.Counters	public static List<E> topKeys(Counter<E>, int) 	e97816:86;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98192:67;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98180:79;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98121:161;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98121:144;
edu.stanford.nlp.stats.Counters	public static List<Pair<E,java.lang.Double>> topKeysWithCounts(Counter<E>, int) 	e98138:144;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98438:193;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98438:173;
edu.stanford.nlp.stats.Counters	public static Counter<E> getFCounter(Counter<E>, Counter<E>, double) 	e98389:222;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98977:83;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98977:60;
edu.stanford.nlp.stats.Counters	public static Counter<E> getCounts(Counter<E>, Collection<E>) 	e98925:112;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e99254:80;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e99202:138;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e99165:175;
edu.stanford.nlp.stats.Counters	public static void retainKeys(Counter<E>, Function<E,java.lang.Boolean>) 	e99202:180;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99507:104;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99507:87;
edu.stanford.nlp.stats.Counters	public static Counter<E> flatten(Map<E2,Counter<E>>) 	e99461:133;
